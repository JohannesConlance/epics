{"name":"Epics - the epic EBICS client ","tagline":"a full ruby implementation of EBICS ","body":"[![Build Status](https://travis-ci.org/railslove/epics.svg?branch=master)](https://travis-ci.org/railslove/epics)\r\n[![Gem Version](https://badge.fury.io/rb/epics.svg)](http://badge.fury.io/rb/epics)\r\n\r\n# Epics\r\n\r\nEPICS is a ruby implementation of the [EBICS](http://www.ebics.org/) (Electronic Banking Internet Communication Standard)\r\n\r\nThe client support the complete initialization process comprising INI, HIA and HPB including the INI letter generation. It offers support for the most common download and upload order types (STA HAA HTD HPD PKT HAC HKD C52 C53 CD1 CDD CCT)\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'epics'\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install epics\r\n\r\n\r\n## Getting started\r\n\r\nIn case you are new to EBICS, you'll have to complete a initialization process with\r\nyour bank. Epics can help you to generate all the necessary keys and directly store\r\nthem for later use, but first you'll have to to lift some contractually work with your\r\nbank.\r\n\r\nOnce the paperwork is done, your bank should provide you with:\r\n\r\n* a URL to their EBICS Server\r\n* a HOST ID\r\n* a PARTNER ID\r\n* n User IDs (this depends on the bank and your needs)\r\n\r\nTake this parameters and start setting up one UserID (repeat this for every user\r\nyou want to initialize):\r\n\r\n```ruby\r\ne = Epics::Client.setup(\"my-super-secret\", \"https://ebics.sandbox\", \"SIZBN001\", \"EBIX\", \"EPICS\")\r\n```\r\n\r\nTo use the keys later, just store them in a file\r\n\r\n```ruby\r\ne.save_keys(\"/home/epics/my.key\")\r\n# or store the json elsewhere, but store it! for gods sake :D\r\n```\r\n\r\nIt is really __important__ to keep your keys around, once your user has been initialized\r\nyou'll have to start over when you loose the keys!\r\n\r\nSubmit the keys to your bank:\r\n\r\n```ruby\r\ne.INI # sends the signature key\r\n\r\ne.HIA # sends the encryption and authentication keys\r\n```\r\n\r\nThe next step is to print the INI letter and post it to your bank:\r\n\r\n```ruby\r\ne.save_ini_letter( 'My Banks Name', \"/home/epics/ini.html\" )\r\n```\r\n\r\nOpen the generated HTML file in your favorite browser and print it out (skipping\r\nheader and footer sounds like a solid setting here ;) In case your having difficulties\r\nwith the encoding, try forcing your browser to use UTF-8.\r\n\r\nPut the INI letter in a envelope and mail it to your bank!\r\n\r\nDone! ... Well not completly :)\r\n\r\nOnce the bank confirms that your user is completely initialized. You'll have to\r\ndownload the public keys of your bank:\r\n\r\n```ruby\r\n### see below for client creation\r\ne.HPB\r\n```\r\n\r\nThen again, save the keys or store the json somewhere safe.\r\n\r\nYou're now ready to go. Maybe try:\r\n\r\n```ruby\r\ne.HAA\r\n```\r\n\r\nTo get a list of all supported order types.\r\n\r\n\r\n## Need help? Having questions? \r\n\r\nWe have many years of experience in developing innovative applications for the finance sector and integration application with financial institutions. - you might want to have a look at our [portfolio](http://www.railslove.com/portfolio)   \r\n__If you need help we are happy to provide consulting or development services. Contact us: [team@railslove.com](mailto:team@railslove.com)__\r\n\r\n\r\n## Usage\r\n\r\n### Create a client\r\n\r\n```ruby\r\n# read the keys from a file\r\ne = Epics::Client.new(File.open('/tmp/my.key'), 'passphrase', 'url', 'host', 'user', 'partner')\r\n\r\n# or provide a string hoding the key data\r\nkeys = File.read('/tmp/my.key')\r\n\r\ne = Epics::Client.new(keys, 'passphrase', 'url', 'host', 'user', 'partner')\r\n```\r\n\r\n\r\n## Features\r\n\r\n### Initialization\r\n\r\n* INI (Sends the public key of the electronic signature.)\r\n* HIA (Sends the public authentication (X002) and encryption (E002) keys.)\r\n\r\n### Downloads\r\n\r\nCurrently this EPICS implementation supports the following order types:\r\n\r\n* HPB (fetch your bank's public keys)\r\n* STA (statements in MT940 format)\r\n* HAA (available order types)\r\n* HTD (user properties and settings)\r\n* HPD (the available bank parameters)\r\n* PKT (customer usage report in text format)\r\n* HAC (customer usage report in xml format)\r\n* ... more coming soon\r\n\r\nExample:\r\n\r\n```ruby\r\nputs e.STA('2014-09-01', '2014-09-11')\r\n# result is a MT940 feed\r\n\r\n:20:1\r\n:25:/PL12124012551111000015237873\r\n:28C:00152\r\n:60F:C081130PLN000000002535,03\r\n:61:0810021002DN000000001273,23N641NONREF\r\n:86:641^00PRZELEW MI¨DZYBANKOWY BETA/^34000\r\n^3019401076^38PL54194010765205871800000000\r\n^20wynagrodzenie z tytulu umow^21y o prac e\r\n^32BANKA MONIKA\r\n^62PODCHORAZYCH 16/1580-298 GD^63ANSK\r\n:61:0810021002DN000000001287,40N641NONREF\r\n:86:641^00PRZELEW MI¨DZYBANKOWY BETA/^34000\r\n^3010201909^38PL74102019090000310200475772\r\n^20wynagrodzenie z tytulu umow^21y o prac e\r\n^32SZCZACHOR DOROTA\r\n^62RATAJA 13B/1083-032 PSZCZOL^63KI\r\n```\r\n\r\n### Uploads\r\n\r\n* CD1 (Uploads a SEPA Direct Debit document of type COR1)\r\n* CDD (Uploads a SEPA Direct Debit document of type CORE)\r\n* CCT (Uploads a SEPA Credit document)\r\n* ... more coming soon\r\n\r\nExample:\r\n\r\n```ruby\r\nputs e.CD1(\"i-am-a-PAIN-xml-file\")\r\n# res is a the transaction id of the order\r\n```\r\n\r\n### Lazy Mode\r\n\r\nOnce you have a client, go ahead and start playing! There are 3 convinence methods\r\nthat are hiding some strange names from you:\r\n\r\n* debit( _xml_ ) (submits a PAIN.008.003.02 document via CDD)\r\n* credit( _xml_ ) (submits a pain.001.003.03 document)\r\n* statements( _from_, _to_ ) (fetches an account statement via STA)\r\n\r\nIf you need more sophisticated EBICS order types, please read the next section\r\nabout the supported functionalities.\r\n\r\n\r\n## Issues and Feature Requests\r\n\r\n[Railslove](http://railslove.com) is commited to provide the best developer tools for integrating with financial institutions. Epics is one of our many tools and services. \r\nIf you are missing some features or something is not working as expected please create an issue. \r\n\r\n\r\n\r\n## Supported Banks\r\n\r\nThis gem provides a full implementation of the Electronic Banking Internet Communication Standard and works with any bank that supports this standard. Please ask your bank if they support EBICS and what order types are available. \r\n\r\nBesides EBCIS being a standard, some server implementations are slighty different. \r\nIs Epics working with your institution? \r\nPlease help us to grow this list of supported banks:\r\n\r\n* Sofortbank\r\n* Deutsche Bank\r\n* Sparkasse KölnBonn\r\n\r\n\r\n## Links\r\n\r\n* [ebics.de](http://www.ebics.de/)\r\n* [EBICS specification](http://www.ebics.de/index.php?id=30)\r\n* [Common Integrative Implementation Guide to Supplement the EBICS Specification (pdf)](http://www.ebics.de/fileadmin/unsecured/specification/implementation_guide_DE/EBICS_Common_IG_basiert_auf_EBICS_2.5.pdf)\r\n* [Die Deutsche Kreditwirtschaft](http://www.die-deutsche-kreditwirtschaft.de/) \r\n\r\n\r\n## Contributing\r\n\r\n0. Contact team@railslove.com for information about the CLA\r\n1. Fork it ( https://github.com/[my-github-username]/epics/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n\r\n\r\n------------\r\n2014 - built with love by [Railslove](http://railslove.com) and released under the [GNU LESSER GENERAL PUBLIC LICENSE](https://github.com/railslove/epics/blob/master/LICENSE.txt). We have built quite a number of FinTech products. If you need support we are happy to help. Please contact us at team@railslove.com.\r\n","google":"UA-3621621-23","note":"Don't delete this file! It's used internally to help with page regeneration."}